import tiles.*
import items.*
import statusBar.*

describe "pedidos requeridos test"{
	var tomato = new Ingredient(name="tomato")
	var lettuce = new Ingredient(name="lettuce")
	var meat = new Ingredient(name="meat",state=chopped)
	var recipeTL = new Recipe(ingredients=[tomato,lettuce])
	var recipeTTL = new Recipe(ingredients=[tomato,tomato,lettuce])
	var plateTL = new Plate(ingredients=[tomato,lettuce])
	var plateLT = new Plate(ingredients=[lettuce,tomato])
	var plateTTL = new Plate(ingredients=[tomato,tomato,lettuce])
	var plateTM = new Plate(ingredients=[tomato,meat])
	var plateLTCut = new Plate(ingredients=[lettuce,new Ingredient(name="tomato",state=chopped)])
	
	test "se acepta los mismos ingredientes" {
		assert.that(recipeTL.plateMeetsRequierements(plateTL))
	}
	
	test "se aceptan los mismos ingredientes por más de un tipo" {
		assert.that(recipeTTL.plateMeetsRequierements(plateTTL))
	}
	
	test "no se aceptan menos los tipos de ingredientes" {
		assert.notThat(recipeTL.plateMeetsRequierements(new Plate(ingredients=[tomato])))
	}
	
	test "no se aceptan ingredientes de más" {
		assert.notThat(new Recipe(ingredients=[tomato]).plateMeetsRequierements(plateTL))
	}
	
	test "diferentes tipos de ingredientes no son aceptados" {
		assert.notThat(recipeTL.plateMeetsRequierements(plateTM))
	}
	
	test "una orden diferente es aceptado" {
		assert.that(recipeTL.plateMeetsRequierements(plateLT))
	}
	
	test "todos los ingredientes están bien pero no se acepta menos de los requeridos" {
		assert.notThat(recipeTTL.plateMeetsRequierements(plateTL))
	}
	
	
	// State of expected plate ingredients
	
	test "si algún ingrediente está en un estado distinto, no se acepta" {
		assert.notThat(recipeTL.plateMeetsRequierements(plateLTCut))
	}
	
	test "si un ingrediente está en un estado distinto, no se acepta" {
		plateLTCut.ingredients().add(tomato)
		assert.notThat(recipeTTL.plateMeetsRequierements(plateLTCut))
	}
}